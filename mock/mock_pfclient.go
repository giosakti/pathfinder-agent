// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pathfinder-cm/pathfinder-go-client/pfclient (interfaces: Pfclient)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	pfmodel "github.com/pathfinder-cm/pathfinder-go-client/pfmodel"
	reflect "reflect"
)

// MockPfclient is a mock of Pfclient interface
type MockPfclient struct {
	ctrl     *gomock.Controller
	recorder *MockPfclientMockRecorder
}

// MockPfclientMockRecorder is the mock recorder for MockPfclient
type MockPfclientMockRecorder struct {
	mock *MockPfclient
}

// NewMockPfclient creates a new mock instance
func NewMockPfclient(ctrl *gomock.Controller) *MockPfclient {
	mock := &MockPfclient{ctrl: ctrl}
	mock.recorder = &MockPfclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPfclient) EXPECT() *MockPfclientMockRecorder {
	return m.recorder
}

// FetchProvisionedContainersFromServer mocks base method
func (m *MockPfclient) FetchProvisionedContainersFromServer(arg0 string) (*pfmodel.ContainerList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProvisionedContainersFromServer", arg0)
	ret0, _ := ret[0].(*pfmodel.ContainerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProvisionedContainersFromServer indicates an expected call of FetchProvisionedContainersFromServer
func (mr *MockPfclientMockRecorder) FetchProvisionedContainersFromServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProvisionedContainersFromServer", reflect.TypeOf((*MockPfclient)(nil).FetchProvisionedContainersFromServer), arg0)
}

// FetchScheduledContainersFromServer mocks base method
func (m *MockPfclient) FetchScheduledContainersFromServer(arg0 string) (*pfmodel.ContainerList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchScheduledContainersFromServer", arg0)
	ret0, _ := ret[0].(*pfmodel.ContainerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchScheduledContainersFromServer indicates an expected call of FetchScheduledContainersFromServer
func (mr *MockPfclientMockRecorder) FetchScheduledContainersFromServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchScheduledContainersFromServer", reflect.TypeOf((*MockPfclient)(nil).FetchScheduledContainersFromServer), arg0)
}

// MarkContainerAsBootstrapError mocks base method
func (m *MockPfclient) MarkContainerAsBootstrapError(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsBootstrapError", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsBootstrapError indicates an expected call of MarkContainerAsBootstrapError
func (mr *MockPfclientMockRecorder) MarkContainerAsBootstrapError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsBootstrapError", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsBootstrapError), arg0, arg1)
}

// MarkContainerAsBootstrapStarted mocks base method
func (m *MockPfclient) MarkContainerAsBootstrapStarted(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsBootstrapStarted", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsBootstrapStarted indicates an expected call of MarkContainerAsBootstrapStarted
func (mr *MockPfclientMockRecorder) MarkContainerAsBootstrapStarted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsBootstrapStarted", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsBootstrapStarted), arg0, arg1)
}

// MarkContainerAsBootstrapped mocks base method
func (m *MockPfclient) MarkContainerAsBootstrapped(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsBootstrapped", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsBootstrapped indicates an expected call of MarkContainerAsBootstrapped
func (mr *MockPfclientMockRecorder) MarkContainerAsBootstrapped(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsBootstrapped", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsBootstrapped), arg0, arg1)
}

// MarkContainerAsDeleted mocks base method
func (m *MockPfclient) MarkContainerAsDeleted(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsDeleted", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsDeleted indicates an expected call of MarkContainerAsDeleted
func (mr *MockPfclientMockRecorder) MarkContainerAsDeleted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsDeleted", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsDeleted), arg0, arg1)
}

// MarkContainerAsProvisionError mocks base method
func (m *MockPfclient) MarkContainerAsProvisionError(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsProvisionError", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsProvisionError indicates an expected call of MarkContainerAsProvisionError
func (mr *MockPfclientMockRecorder) MarkContainerAsProvisionError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsProvisionError", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsProvisionError), arg0, arg1)
}

// MarkContainerAsProvisioned mocks base method
func (m *MockPfclient) MarkContainerAsProvisioned(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsProvisioned", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsProvisioned indicates an expected call of MarkContainerAsProvisioned
func (mr *MockPfclientMockRecorder) MarkContainerAsProvisioned(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsProvisioned", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsProvisioned), arg0, arg1)
}

// Register mocks base method
func (m *MockPfclient) Register(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockPfclientMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPfclient)(nil).Register), arg0, arg1)
}

// StoreMetrics mocks base method
func (m *MockPfclient) StoreMetrics(arg0 *pfmodel.Metrics) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetrics", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreMetrics indicates an expected call of StoreMetrics
func (mr *MockPfclientMockRecorder) StoreMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetrics", reflect.TypeOf((*MockPfclient)(nil).StoreMetrics), arg0)
}

// UpdateContainerStatus mocks base method
func (m *MockPfclient) UpdateContainerStatus(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerStatus indicates an expected call of UpdateContainerStatus
func (mr *MockPfclientMockRecorder) UpdateContainerStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerStatus", reflect.TypeOf((*MockPfclient)(nil).UpdateContainerStatus), arg0, arg1, arg2)
}

// UpdateIpaddress mocks base method
func (m *MockPfclient) UpdateIpaddress(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIpaddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIpaddress indicates an expected call of UpdateIpaddress
func (mr *MockPfclientMockRecorder) UpdateIpaddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIpaddress", reflect.TypeOf((*MockPfclient)(nil).UpdateIpaddress), arg0, arg1, arg2)
}
