// Code generated by MockGen. DO NOT EDIT.
// Source: ../pathfinder-go-client/pfclient/pfclient.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	pfmodel "github.com/pathfinder-cm/pathfinder-go-client/pfmodel"
	reflect "reflect"
)

// MockPfclient is a mock of Pfclient interface
type MockPfclient struct {
	ctrl     *gomock.Controller
	recorder *MockPfclientMockRecorder
}

// MockPfclientMockRecorder is the mock recorder for MockPfclient
type MockPfclientMockRecorder struct {
	mock *MockPfclient
}

// NewMockPfclient creates a new mock instance
func NewMockPfclient(ctrl *gomock.Controller) *MockPfclient {
	mock := &MockPfclient{ctrl: ctrl}
	mock.recorder = &MockPfclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPfclient) EXPECT() *MockPfclientMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockPfclient) Register(node, ipaddress string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", node, ipaddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockPfclientMockRecorder) Register(node, ipaddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPfclient)(nil).Register), node, ipaddress)
}

// FetchScheduledContainersFromServer mocks base method
func (m *MockPfclient) FetchScheduledContainersFromServer(node string) (*pfmodel.ContainerList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchScheduledContainersFromServer", node)
	ret0, _ := ret[0].(*pfmodel.ContainerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchScheduledContainersFromServer indicates an expected call of FetchScheduledContainersFromServer
func (mr *MockPfclientMockRecorder) FetchScheduledContainersFromServer(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchScheduledContainersFromServer", reflect.TypeOf((*MockPfclient)(nil).FetchScheduledContainersFromServer), node)
}

// FetchProvisionedContainersFromServer mocks base method
func (m *MockPfclient) FetchProvisionedContainersFromServer(node string) (*pfmodel.ContainerList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProvisionedContainersFromServer", node)
	ret0, _ := ret[0].(*pfmodel.ContainerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProvisionedContainersFromServer indicates an expected call of FetchProvisionedContainersFromServer
func (mr *MockPfclientMockRecorder) FetchProvisionedContainersFromServer(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProvisionedContainersFromServer", reflect.TypeOf((*MockPfclient)(nil).FetchProvisionedContainersFromServer), node)
}

// UpdateIpaddress mocks base method
func (m *MockPfclient) UpdateIpaddress(node, hostname, ipaddress string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIpaddress", node, hostname, ipaddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIpaddress indicates an expected call of UpdateIpaddress
func (mr *MockPfclientMockRecorder) UpdateIpaddress(node, hostname, ipaddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIpaddress", reflect.TypeOf((*MockPfclient)(nil).UpdateIpaddress), node, hostname, ipaddress)
}

// MarkContainerAsProvisioned mocks base method
func (m *MockPfclient) MarkContainerAsProvisioned(node, hostname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsProvisioned", node, hostname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsProvisioned indicates an expected call of MarkContainerAsProvisioned
func (mr *MockPfclientMockRecorder) MarkContainerAsProvisioned(node, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsProvisioned", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsProvisioned), node, hostname)
}

// MarkContainerAsProvisionError mocks base method
func (m *MockPfclient) MarkContainerAsProvisionError(node, hostname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsProvisionError", node, hostname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsProvisionError indicates an expected call of MarkContainerAsProvisionError
func (mr *MockPfclientMockRecorder) MarkContainerAsProvisionError(node, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsProvisionError", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsProvisionError), node, hostname)
}

// MarkContainerAsBootstrapStarted mocks base method
func (m *MockPfclient) MarkContainerAsBootstrapStarted(node, hostname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsBootstrapStarted", node, hostname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsBootstrapStarted indicates an expected call of MarkContainerAsBootstrapStarted
func (mr *MockPfclientMockRecorder) MarkContainerAsBootstrapStarted(node, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsBootstrapStarted", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsBootstrapStarted), node, hostname)
}

// MarkContainerAsRelocateStarted mocks base method
func (m *MockPfclient) MarkContainerAsRelocateStarted(node, hostname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsRelocateStarted", node, hostname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsRelocateStarted indicates an expected call of MarkContainerAsRelocateStarted
func (mr *MockPfclientMockRecorder) MarkContainerAsRelocateStarted(node, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsRelocateStarted", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsRelocateStarted), node, hostname)
}

// MarkContainerAsRelocateError mocks base method
func (m *MockPfclient) MarkContainerAsRelocateError(node, hostname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsRelocateError", node, hostname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsRelocateError indicates an expected call of MarkContainerAsRelocateError
func (mr *MockPfclientMockRecorder) MarkContainerAsRelocateError(node, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsRelocateError", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsRelocateError), node, hostname)
}

// MarkContainerAsBootstrapped mocks base method
func (m *MockPfclient) MarkContainerAsBootstrapped(node, hostname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsBootstrapped", node, hostname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsBootstrapped indicates an expected call of MarkContainerAsBootstrapped
func (mr *MockPfclientMockRecorder) MarkContainerAsBootstrapped(node, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsBootstrapped", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsBootstrapped), node, hostname)
}

// MarkContainerAsBootstrapError mocks base method
func (m *MockPfclient) MarkContainerAsBootstrapError(node, hostname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsBootstrapError", node, hostname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsBootstrapError indicates an expected call of MarkContainerAsBootstrapError
func (mr *MockPfclientMockRecorder) MarkContainerAsBootstrapError(node, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsBootstrapError", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsBootstrapError), node, hostname)
}

// MarkContainerAsDeleted mocks base method
func (m *MockPfclient) MarkContainerAsDeleted(node, hostname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkContainerAsDeleted", node, hostname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkContainerAsDeleted indicates an expected call of MarkContainerAsDeleted
func (mr *MockPfclientMockRecorder) MarkContainerAsDeleted(node, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkContainerAsDeleted", reflect.TypeOf((*MockPfclient)(nil).MarkContainerAsDeleted), node, hostname)
}

// StoreMetrics mocks base method
func (m *MockPfclient) StoreMetrics(collectedMetrics *pfmodel.Metrics) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetrics", collectedMetrics)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreMetrics indicates an expected call of StoreMetrics
func (mr *MockPfclientMockRecorder) StoreMetrics(collectedMetrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetrics", reflect.TypeOf((*MockPfclient)(nil).StoreMetrics), collectedMetrics)
}
