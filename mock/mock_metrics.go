// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pathfinder-cm/pathfinder-agent/metrics (interfaces: Metrics)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/pathfinder-cm/pathfinder-agent/model"
	reflect "reflect"
)

// MockMetrics is a mock of Metrics interface
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// Collect mocks base method
func (m *MockMetrics) Collect() model.Metrics {
	ret := m.ctrl.Call(m, "Collect")
	ret0, _ := ret[0].(model.Metrics)
	return ret0
}

// Collect indicates an expected call of Collect
func (mr *MockMetricsMockRecorder) Collect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockMetrics)(nil).Collect))
}

// getMemoryMetrics mocks base method
func (m *MockMetrics) getMemoryMetrics() model.Memory {
	ret := m.ctrl.Call(m, "getMemoryMetrics")
	ret0, _ := ret[0].(model.Memory)
	return ret0
}

// getMemoryMetrics indicates an expected call of getMemoryMetrics
func (mr *MockMetricsMockRecorder) getMemoryMetrics() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getMemoryMetrics", reflect.TypeOf((*MockMetrics)(nil).getMemoryMetrics))
}
